using System;
using System.Collections.Generic;
using System.ComponentModel.Design;
using System.Reflection;
using ColossalFramework;
using UnityEngine;

namespace TrafficManager
{
    class TrafficPriority
    {
        public enum SegmentDirection
        {
            None = 0,
            Forward = 1,
            Back = 2,
            Left = 4,
            Right = 8,
            ForwardLeft = 5,
            Forwardright = 9,
            BackLeft = 6,
            BackRight = 10
        }

        public static Dictionary<string, PrioritySegment> prioritySegments = new Dictionary<string, PrioritySegment>();

        public static Dictionary<ushort, PriorityCar> vehicleList = new Dictionary<ushort, PriorityCar>();

        public static void addPrioritySegment(ushort nodeID, int segmentID, PrioritySegment.PriorityType type)
        {
            prioritySegments.Add(nodeID + "_" + segmentID, new PrioritySegment(nodeID, segmentID, type));
        }

        public static void removePrioritySegment(ushort nodeID, int segmentID)
        {
            prioritySegments.Remove(nodeID + "_" + segmentID);
        }

        public static bool isPrioritySegment(ushort nodeID, int segmentID)
        {
            return prioritySegments.ContainsKey(nodeID + "_" + segmentID);
        }

        public static PrioritySegment getPrioritySegment(ushort nodeID, int segmentID)
        {
            return prioritySegments[nodeID + "_" + segmentID];
        }

        public static bool incomingVehicles(ushort targetCar, ushort nodeID)
        {
            uint currentFrameIndex = Singleton<SimulationManager>.instance.m_currentFrameIndex;
            uint frame = currentFrameIndex >> 5;
            var node = TrafficLightTool.GetNetNode(nodeID);

            var fromPrioritySegment = getPrioritySegment(nodeID, vehicleList[targetCar].fromSegment);

            List<ushort> removeCarList = new List<ushort>();

            var numCars = 0;

            // get all cars
            for (int s = 0; s < node.CountSegments(); s++)
            {
                var segment = node.GetSegment(s);

                if (segment != 0 && segment != vehicleList[targetCar].fromSegment)
                {
                    if (isPrioritySegment(nodeID, segment))
                    {
                        var prioritySegment = getPrioritySegment(nodeID, segment);

                        // select outdated cars
                        foreach (var car in prioritySegment.cars)
                        {
                            var frameReduce = vehicleList[car].lastSpeed < 70 ? 3u : 2u;

                            if (vehicleList[car].lastFrame < frame - frameReduce)
                            {
                                removeCarList.Add(car);
                            }
                        }

                        // remove outdated cars
                        foreach (var rcar in removeCarList)
                        {
                            vehicleList[rcar].resetCar();
                            prioritySegment.RemoveCar(rcar);
                        }

                        removeCarList.Clear();


                        if (fromPrioritySegment.type == PrioritySegment.PriorityType.Main)
                        {
                            if (prioritySegment.type == PrioritySegment.PriorityType.Main)
                            {
                                numCars += prioritySegment.numCars;

                                foreach (var car in prioritySegment.cars)
                                {
                                    if (vehicleList[car].lastSpeed > 0.1f)
                                    {
                                        numCars = checkSameRoadIncomingCar(targetCar, car, nodeID) ? numCars - 1 : numCars;
                                    }
                                    else
                                    {
                                        numCars--;
                                    }
                                }
                            }
                        }
                        else
                        {
                            numCars += prioritySegment.numCars;

                            foreach (var car in prioritySegment.cars)
                            {
                                if (prioritySegment.type == PrioritySegment.PriorityType.Main)
                                {
                                    if (!vehicleList[car].stopped)
                                    {
                                        numCars = checkPriorityRoadIncomingCar(targetCar, car, nodeID) ? numCars - 1 : numCars;
                                    }
                                    else
                                    {
                                        numCars--;
                                    }
                                }
                                else
                                {
                                    if (vehicleList[car].lastSpeed > 0.1f)
                                    {
                                        numCars = checkSameRoadIncomingCar(targetCar, car, nodeID)
                                            ? numCars - 1
                                            : numCars;
                                    }
                                    else
                                    {
                                        numCars--;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if (numCars > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public static bool laneOrderCorrect(int segmentid, uint leftLane, uint rightLane)
        {
            NetManager instance = Singleton<NetManager>.instance;

            var segment = instance.m_segments.m_buffer[segmentid];
            var info = segment.Info;

            uint num2 = segment.m_lanes;
            int num3 = 0;

            var oneWaySegment = true;

            while (num3 < info.m_lanes.Length && num2 != 0u)
            {
                if (info.m_lanes[num3].m_laneType != NetInfo.LaneType.Pedestrian &&
                    (info.m_lanes[num3].m_direction == NetInfo.Direction.Backward || info.m_lanes[num3].m_direction == NetInfo.Direction.Backward))
                {
                    oneWaySegment = false;
                }

                num2 = instance.m_lanes.m_buffer[(int)((UIntPtr)num2)].m_nextLane;
                num3++;
            }

            num3 = 0;

            if (oneWaySegment)
            {
                var foundRightlane = false;

                while (num3 < info.m_lanes.Length && num2 != 0u)
                {
                    if (leftLane == num2)
                    {
                        if (foundRightlane)
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }

                    if (rightLane == num2)
                    {
                        foundRightlane = true;
                    }

                    num2 = instance.m_lanes.m_buffer[(int) ((UIntPtr) num2)].m_nextLane;
                    num3++;
                }
            }
            else
            {
                var foundLeftLane = false;

                while (num3 < info.m_lanes.Length && num2 != 0u)
                {
                    if (rightLane == num2)
                    {
                        if (foundLeftLane)
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }

                    if (leftLane == num2)
                    {
                        foundLeftLane = true;
                    }

                    num2 = instance.m_lanes.m_buffer[(int)((UIntPtr)num2)].m_nextLane;
                    num3++;
                }
            }

            return false;
        }

        public static bool checkSameRoadIncomingCar(ushort targetCarID, ushort incomingCarID, ushort nodeID)
        {
            NetManager instance = Singleton<NetManager>.instance;

            var targetCar = vehicleList[targetCarID];
            var incomingCar = vehicleList[incomingCarID];

            if(isRightSegment(targetCar.fromSegment, incomingCar.fromSegment, nodeID))
            {
                if (isRightSegment(targetCar.fromSegment, targetCar.toSegment, nodeID))
                {
                    return true;
                }
                else if (targetCar.toSegment == incomingCar.toSegment && targetCar.toLaneID != incomingCar.toLaneID)
                {
                    return true;
                }
            }
            else if (isLeftSegment(targetCar.fromSegment, incomingCar.fromSegment, nodeID))
                // incoming is on the left
            {
                return true;
            }
            else // incoming is in front or elsewhere
            {
                if (!isLeftSegment(targetCar.fromSegment, targetCar.toSegment, nodeID))
                    // target car not going left
                {
                    return true;
                }
                else if (isRightSegment(incomingCar.fromSegment, incomingCar.toSegment, nodeID))
                {
                    if (targetCar.toLaneID != incomingCar.toLaneID)
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        public static bool checkPriorityRoadIncomingCar(ushort targetCarID, ushort incomingCarID, ushort nodeID)
        {
            NetManager instance = Singleton<NetManager>.instance;

            var targetCar = vehicleList[targetCarID];
            var incomingCar = vehicleList[incomingCarID];

            if (incomingCar.toSegment == targetCar.toSegment)
            {
                if (incomingCar.toLaneID != targetCar.toLaneID)
                {
                    if (isRightSegment(targetCar.fromSegment, targetCar.toSegment, nodeID))
                        // target car goes right
                    {
                        // go if incoming car is in the left lane
                        return laneOrderCorrect(targetCar.toSegment, incomingCar.toLaneID, targetCar.toLaneID);
                    }
                    else if (isLeftSegment(targetCar.fromSegment, targetCar.toSegment, nodeID))
                        // target car goes left
                    {
                        // go if incoming car is in the right lane
                        return laneOrderCorrect(targetCar.toSegment, targetCar.toLaneID, incomingCar.toLaneID);
                    }
                    else // target car goes straight (or other road)
                    {
                        if (isRightSegment(incomingCar.fromSegment, incomingCar.toSegment, nodeID)) // incoming car goes right
                        {
                            // go if incoming car is in the left lane
                            return laneOrderCorrect(targetCar.toSegment, targetCar.toLaneID, incomingCar.toLaneID);
                        }
                        else if (isLeftSegment(incomingCar.fromSegment, incomingCar.toSegment, nodeID)) // incoming car goes left
                        {
                            // go if incoming car is in the right lane
                            return laneOrderCorrect(targetCar.toSegment, incomingCar.toLaneID,
                                targetCar.toLaneID);
                        }
                    }
                }
            }
            else if (incomingCar.toSegment == targetCar.fromSegment)
            {
                if (isRightSegment(incomingCar.fromSegment, incomingCar.toSegment, nodeID))
                {
                    return true;
                }
                else if (targetCar.toSegment == incomingCar.fromSegment)
                {
                    return true;
                }
            }
            else // if no segment match
            {
                // target car turning right
                if (isRightSegment(targetCar.fromSegment, targetCar.toSegment, nodeID))
                {
                    return true;
                }
                else if (isRightSegment(incomingCar.fromSegment, incomingCar.toSegment, nodeID)) // incoming car turning right
                {
                    return true;
                }
            }

            return false;
        }

        public static bool isRightSegment(int segmentSource, int rightSegment, ushort nodeid)
        {
            NetManager instance = Singleton<NetManager>.instance;
            var dir = GetSegmentDirection(segmentSource, nodeid);

            Debug.Log(segmentSource + " " + dir.x +":" + (int)dir.y +":"+(int)dir.z + " " + dir);

            if (GetSegmentRight(segmentSource, nodeid) == rightSegment)
            {
                return true;
            }

            return false;
        }

        public static bool isLeftSegment(int segmentSource, int leftSegment, ushort nodeid)
        {
            NetManager instance = Singleton<NetManager>.instance;

            if (GetSegmentLeft(segmentSource, nodeid) == leftSegment)
            {
                return true;
            }

            return false;
        }

        public static Vector3 GetSegmentDirection(int segment, ushort nodeid)
        {
            NetManager instance = Singleton<NetManager>.instance;

            Vector3 dir;

            if (instance.m_segments.m_buffer[(int)segment].m_startNode == nodeid)
            {
                dir = instance.m_segments.m_buffer[(int)segment].m_startDirection;
            }
            else
            {
                dir = instance.m_segments.m_buffer[(int)segment].m_endDirection;
            }

            SegmentDirection direction;

            if (dir.z > 0.1f)
                direction |= SegmentDirection.Forward;

            if(dir.z < -0.1f)
                direction |= SegmentDirection.Back;;

            return direction;
        }

        public static int GetSegmentRight(int segment, ushort nodeid)
        {
            NetManager instance = Singleton<NetManager>.instance;

            if (instance.m_segments.m_buffer[(int)segment].m_startNode == nodeid)
            {
                return instance.m_segments.m_buffer[(int)segment].m_startRightSegment;
            }
            else
            {
                return instance.m_segments.m_buffer[(int)segment].m_endRightSegment;
            }
        }

        public static int GetSegmentLeft(int segment, ushort nodeid)
        {
            NetManager instance = Singleton<NetManager>.instance;

            if (instance.m_segments.m_buffer[(int)segment].m_startNode == nodeid)
            {
                return instance.m_segments.m_buffer[(int)segment].m_startLeftSegment;
            }
            else
            {
                return instance.m_segments.m_buffer[(int)segment].m_endLeftSegment;
            }
        }
    }
    class PriorityCar
    {
        public enum CarState
        {
            None,
            Enter,
            Transit,
            Stop,
            Leave
        }

        public CarState carState = CarState.None;

        public int waitTime = 0;

        public ushort toNode;
        public int fromSegment;
        public int toSegment;
        public uint toLaneID;
        public ushort fromLaneFlags;
        public float lastSpeed;
        public float yieldSpeedReduce;
        public bool stopped = false;

        public uint lastFrame;

        public void resetCar()
        {
            toNode = 0;
            fromSegment = 0;
            toSegment = 0;
            toLaneID = 0;
            fromLaneFlags = 0;
            stopped = false;

            waitTime = 0;
            carState = CarState.None;
        }
    }

    class PrioritySegment
    {
        public enum PriorityType
        {
            None,
            Main,
            Stop,
            Yield
        }

        public ushort nodeid;
        public int segmentid;


        public PriorityType type = PriorityType.Main;

        public int numCars = 0;

        public List<ushort> cars = new List<ushort>(); 

        public PrioritySegment(ushort nodeid, int segmentid, PriorityType type)
        {
            this.nodeid = nodeid;
            this.segmentid = segmentid;
            this.type = type;
        }

        public void AddCar(ushort vehicleID)
        {
            if (!cars.Contains(vehicleID))
            {
                cars.Add(vehicleID);
                numCars++;
            }
        }

        public void RemoveCar(ushort vehicleID)
        {
            if (cars.Contains(vehicleID))
            {
                cars.Remove(vehicleID);
                numCars--;
            }
        }

        public bool HasCar(ushort vehicleID)
        {
            return cars.Contains(vehicleID);
        }
    }
}
